#if !defined(SRKMYINFOWIN_H)
#define SRKMYINFOWIN_H

/*
	Sonork Messaging System

	Portions Copyright (C) 2001 Sonork SRL:

	This program is free software; you can redistribute it and/or modify
	it under the terms of the Sonork Source Code License (SSCL).

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	SSCL for more details.

	You should have received a copy of the SSCL	along with this program;
	if not, write to sscl@sonork.com.

	You may NOT use this source code before reading and accepting the
	Sonork Source Code License (SSCL).
*/


#include "srkwinctrl.h"
#include "srk_winregkey.h"
#include "srk_email_codec.h"

#if !defined(SRKTASKWIN_H)
# include "srktaskwin.h"
#endif

#if !defined(SRKLISTVIEW_H)
# include "srklistview.h"
#endif

#if !defined(SRKTREEVIEW_H)
# include "srktreeview.h"
#endif

#if !defined(SRKBITMAP_H)
# include "srkbitmap.h"
#endif

enum MINFO_PREFERENCE
{
  MINFO_PREF_INVALID		=-1
, MINFO_PREF_HIDE_ON_MINIMIZE     =0
, MINFO_PREF_SHOW_TOOL_TIPS
, MINFO_PREF_MSG_REMINDER
, MINFO_PREF_BLINK_TRAY_ICON
, MINFO_PREF_SEND_WITH_ENTER
, MINFO_PREF_POPUP_MSG_WIN
, MINFO_PREF_AUTO_AUTH
, MINFO_PREF_SHOW_SID_MSG
, MINFO_PREF_START_WITH_WINDOWS
, MINFO_PREF_QUERY_START_MODE
, MINFO_PREF_SLIDER_POS
, MINFO_PREF_COMPRESS_FILES
, MINFO_PREF_CONFIRM_FILE_SEND
, MINFO_PREF_PC_SPEAKER
, MINFO_PREF_MUTE_SOUND
, MINFO_PREFERENCES
};
struct TMyInfoSkinMap
{
	SKIN_COLOR		color;
	SKIN_COLOR_INDEX        index;
	GLS_INDEX		gls;
};

class TSonorkMyInfoWin
:public TSonorkTaskWin
{
public:

	enum TAB
	{
		TAB_LOGIN=0
	,	TAB_INFO
	,	TAB_PIC
	,	TAB_AUTH
	,	TAB_PREFS
	,	TAB_EMAIL
	,	TAB_TRACK
	,	TAB_SKIN
	,	TABS
	};
	enum EDIT_OP
	{
		EDIT_ADD
	,	EDIT_SET
	,	EDIT_DEL
	};
	enum SKIN_INDEX
	{
		SKIN_MSG_VIEW
	,	SKIN_MAIN
	,	SKIN_CLIP
	,	SKIN_SYSCON
	,	SKIN_CHAT
	,	SKIN_INDEXES
	};
private:

	HWND			status_bar;
	HWND			sex_list;
	HWND			country_list;
	HWND			lang_list;
	HWND			bdate_hwnd;
	HWND			auth_list;
	HWND			prefs_combo;
	MINFO_PREFERENCE	cur_pref_item;
	TSonorkListView		prefs_list;
	TSonorkListView		email_acc;
	TSonorkListView		email_exc;
	HWND			email_chk_list;
	HWND			email_rdr_list;
	TSonorkRegKey		appRootKey;
	TSonorkRegKey		appModeKey;
	TSonorkRegKey		usrRootKey;
	TSonorkRegKey		usrModeKey;
	TSonorkId		startup_user_id;
	TSonorkTreeView		track_tree;
	// We increment the cc_no_update when modifying form items
	// so that our handlers don't process the notification events
	// generated by loading the items.
	//
	int			cc_no_update;
	TSonorkShortString	sPwd;
	TSonorkUserDataNotes	UDN;

	struct {
		HWND	hwnd;
		TAB	page;
	}tab_ctrl;

	struct unSKIN{
		HWND		list;
		TSonorkWinCtrl	view;
		RECT		viewRect;
		HDC		memDC;
		HBITMAP		memBM;
		RECT		itemRect;
		DWORD		colors;
		DWORD		selected_color;
		TMyInfoSkinMap*	map;
	}skin;

	HWND			picHwnd;
	TSonorkBitmap	picBm;
	RECT			picBmRect;

	TSonorkError	taskERR;

	TSonorkWin*	page_win[TABS];

	bool	OnCreate();
	void	OnAfterCreate();
	void	LoadLabels();
	BOOL	OnQueryClose();
	void 	OnBeforeDestroy();
	bool 	OnCommand(UINT id,HWND hwnd, UINT notify_code);
	bool	OnDrawItem(DRAWITEMSTRUCT*);

	LRESULT
		OnNotify(WPARAM,TSonorkWinNotify*);

	LRESULT
		OnChildDialogDraw(TSonorkChildDialogNotify*);

	LRESULT
		OnChildDialogNotify(TSonorkChildDialogNotify*);

	LRESULT
		OnCtlWinMsg(TSonorkWinCtrl*,UINT,WPARAM,LPARAM);

	// UpdateCxItems(): Enables/Disables items that can be changed only
	// when connected to the server.
	void	UpdateCxItems();

	// CxItemsEnable() : Used by UpdateCxItems() to enum windows
	static BOOL	CALLBACK 	CxItemsEnable( HWND hwnd, LPARAM lParam );


	bool	OnAppEvent(UINT event, UINT param, void*data);


	void	OnTaskStart(SONORK_WIN_TASK_TYPE,const SONORK_DWORD2&);
	void	OnSonorkTaskData(const SONORK_DWORD2&, TSonorkDataPacket*P, UINT P_size);
	void	OnTaskEnd(SONORK_WIN_TASK_TYPE,const SONORK_DWORD2&, const TSonorkError*);

	void	OnTaskResult(SONORK_FUNCTION);
	
	LRESULT	OnPoke(SONORK_WIN_POKE,LPARAM);

	void	OnPrefItemSelected();
	void	OnPrefItemToggle();
	void	OnPrefItemFlagSelected();
	void	OnPrefItemComboSelected();
	void	OnPrefItemTextKillFocus();
	void	SetPrefListItemFlag(MINFO_PREFERENCE,BOOL);

	void	OnLangSelected();

	void	CmdRefresh();
	void	CmdStore(bool connect, bool destroy);
	void	CmdLoad();

	void	Pk_EditTracker( LPARAM );
	void	Pk_EditAuth( EDIT_OP );
	void	Pk_EditEmailAcc( EDIT_OP );
	void	Pk_EditEmailExc( EDIT_OP );

	void	SaveAuthList();
	void	SaveEmailList();
	void	SaveLogin();
	void	SelectProfile();

	void	LoadLogin(bool user
			, bool net_profile
			, bool cx_change);
	void	UpdateLoginCheckboxes();
	void	LoadInfo();
	void	LoadNotes();
	void	LoadAuthList();
	void	LoadEmailList();
	void		AddEmailAccount(TSonorkEmailAccount*);
	void		AddEmailException(TSonorkEmailExcept*);
	void	LoadTimeZone();

	bool
		LoadPic(SONORK_C_CSTR);
	void	BrowsePic();
	void	SavePic();

	void	LoadTrackerTree(BOOL auto_load);
	void	LoadTrackerSubs();
	void	SaveTrackerSubs();
	UINT	SaveTrackerSubsItem(TSonorkAtomDb&,HTREEITEM);

//	void	AddListItem(HWND, SONORK_C_CSTR name, SKIN_ICON, LPARAM param);

	void	ShowCxOnlyMessageIfNotReady();
	void 	SetCurrentTab(TAB tb , bool update_tab, bool forced );

	void	RebuildSkinPreview();
	void 	DrawItemBlock(DWORD color_no);
	void 	DrawItemText(DWORD color_no);
	void	EditSkinColor(DWORD);
public:
	TSonorkMyInfoWin(TSonorkWin*,TAB tab=TAB_INFO);

static DWORD
	GetPreferenceSetting(MINFO_PREFERENCE);

static DWORD
	SetPreferenceSetting(MINFO_PREFERENCE,DWORD);

static SONORK_C_CSTR
	GetPreferenceLabel(MINFO_PREFERENCE);

};


class TSonorkChgPwdWin
:public TSonorkWin
{

	void	LoadLabels();
	bool 	OnCommand(UINT id,HWND hwnd, UINT notify_code);
	bool	OnDrawItem(DRAWITEMSTRUCT*);
public:
	TSonorkChgPwdWin(TSonorkWin*);
	TSonorkShortString pass;
};

class TSonorkEmailAccountWin
:public TSonorkWin
{
	TSonorkEmailAccount* acc;
	void	LoadLabels();
	bool	OnCreate();
	bool 	OnCommand(UINT id,HWND hwnd, UINT notify_code);
	void	EnableCheckMailItems(BOOL , bool auto_complete);

public:
	TSonorkEmailAccountWin(TSonorkWin*,TSonorkEmailAccount* );
};

class TSonorkEmailExceptWin
:public TSonorkWin
{
	TSonorkEmailExcept* exc;
	void	LoadLabels();
	bool	OnCreate();
	bool 	OnCommand(UINT id,HWND hwnd, UINT notify_code);
	void	SaveForm();
	void	LoadForm();
public:
	TSonorkEmailExceptWin(TSonorkWin*,TSonorkEmailExcept* );
};


#endif