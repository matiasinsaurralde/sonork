#if !defined(SRKSKIN_H)
#define SRKSKIN_H

/*
	Sonork Messaging System

	Portions Copyright (C) 2001 Sonork SRL:

	This program is free software; you can redistribute it and/or modify
	it under the terms of the Sonork Source Code License (SSCL).

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	SSCL for more details.

	You should have received a copy of the SSCL	along with this program;
	if not, write to sscl@sonork.com.

	You may NOT use this source code before reading and accepting the
	Sonork Source Code License (SSCL).
*/

// -------------------------------------------------------------
// ICONS

enum SKIN_ICON			// ImageList Icons
{
  SKIN_ICON_NONE=-1
, SKIN_ICON_CB_UNCHECKED
, SKIN_ICON_CB_CHECKED
, SKIN_ICON_CB_SEMI_CHECKED
, SKIN_ICON_RESERVED_a01
, SKIN_ICON_RESERVED_a02
, SKIN_ICON_RESERVED_a03
, SKIN_ICON_RESERVED_a04
, SKIN_ICON_RESERVED_a05
, SKIN_ICON_UNREAD_MSG				// ROW #1
, SKIN_ICON_PROTECTED_MSG
, SKIN_ICON_ELLIPSES
, SKIN_ICON_INCOMMING
, SKIN_ICON_OUTGOING
, SKIN_ICON_IN_REPLY
, SKIN_ICON_OUT_REPLY
, SKIN_ICON_QUESTION_MARK
, SKIN_ICON_IN_PENDING_QUERY
, SKIN_ICON_IN_QUERY
, SKIN_ICON_OUT_QUERY

, SKIN_ICON_OUTGOING_PENDING
, SKIN_ICON_OUT_REPLY_PENDING
, SKIN_ICON_OUTGOING_ERROR
, SKIN_ICON_OUT_REPLY_ERROR

, SKIN_ICON_MORE_URL
, SKIN_ICON_MORE_FILE
, SKIN_ICON_MORE_FILE_DELETE
, SKIN_ICON_MORE_EMAIL

, SKIN_ICON_RESERVED_b01
, SKIN_ICON_RESERVED_b02
, SKIN_ICON_RESERVED_b03
, SKIN_ICON_RESERVED_b04
, SKIN_ICON_CLOSE_DOWN
, SKIN_ICON_CLOSE_UP

, SKIN_ICON_PANEL		// ROW #2
, SKIN_ICON_EVENT
, SKIN_ICON_TOOLS
, SKIN_ICON_RESERVED_c01
, SKIN_ICON_ADD_USER
, SKIN_ICON_USER_INFO
, SKIN_ICON_DEL_USER
, SKIN_ICON_ERROR
, SKIN_ICON_DISCONNECTED
, SKIN_ICON_CONNECTING
, SKIN_ICON_CONNECTED
, SKIN_ICON_ADD
, SKIN_ICON_DEL
, SKIN_ICON_STOP
, SKIN_ICON_SOUND
, SKIN_ICON_MUTE
, SKIN_ICON_COLORS
, SKIN_ICON_COMMAND_PROMPT
, SKIN_ICON_CLEAR
, SKIN_ICON_CLOSE
, SKIN_ICON_TIME
, SKIN_ICON_NOTES
, SKIN_ICON_BUSY
, SKIN_ICON_SEARCH
, SKIN_ICON_SEARCH_NEXT
, SKIN_ICON_REFRESH
, SKIN_ICON_PIN
, SKIN_ICON_FILE_UPLOAD
, SKIN_ICON_FILE_DOWNLOAD
, SKIN_ICON_FILE_DELETE
, SKIN_ICON_URL
, SKIN_ICON_ADJUST
, SKIN_ICON_EMAIL

, SKIN_ICON_USERS                   // ROW #3
, SKIN_ICON_REMOTE_USERS
, SKIN_ICON_AUTHS
, SKIN_ICON_SEX_MALE
, SKIN_ICON_SEX_FEMALE
, SKIN_ICON_BULLET
, SKIN_ICON_FOLDER_BW
, SKIN_ICON_OPEN_FOLDER_BW
, SKIN_ICON_FOLDER
, SKIN_ICON_OPEN_FOLDER
, SKIN_ICON_NO_SCROLL
, SKIN_ICON_LEFT_ARROW
, SKIN_ICON_RIGHT_ARROW
, SKIN_ICON_DOWN_ARROW
, SKIN_ICON_UP_ARROW
, SKIN_ICON_SECURITY_OFF
, SKIN_ICON_SECURITY_WARN
, SKIN_ICON_SECURITY_ON
, SKIN_ICON_SEND_MSG
, SKIN_ICON_REPLY_MSG
, SKIN_ICON_FILE
, SKIN_ICON_INFO
, SKIN_ICON_ALERT
, SKIN_ICON_SONORK
, SKIN_ICON_DEBUG
, SKIN_ICON_DRIVE
, SKIN_ICON_QUERY_MSG
, SKIN_ICON_ROBOT
, SKIN_ICON_ROBOT_RESERVED
, SKIN_ICON_OK
, SKIN_ICON_CANCEL
, SKIN_ICON_OK_HIGHLIGHTED
, SKIN_ICON_CANCEL_DISABLED

, SKIN_ICON_CHAT                // Row #4
, SKIN_ICON_TRACKER
, SKIN_ICON_IPC
, SKIN_ICON_APP
, SKIN_ICON_PLUGIN_OK
, SKIN_ICON_PLUGIN_ERROR
, SKIN_ICON_WEB_APP
, SKIN_ICON_TEMPLATE
, SKIN_ICON_USER_TEMPLATE
, SKIN_ICON_REPLY_TEMPLATE

, SKIN_ICON_MODE_M_ONLINE
, SKIN_ICON_MODE_M_BUSY
, SKIN_ICON_MODE_M_AT_WORK
, SKIN_ICON_MODE_M_FRIENDLY
, SKIN_ICON_MODE_M_AWAY
, SKIN_ICON_MODE_M_INVISIBLE
, SKIN_ICON_MODE_M_R01
, SKIN_ICON_MODE_M_R02
, SKIN_ICON_MODE_M_R03
, SKIN_ICON_MODE_M_R04
, SKIN_ICON_MODE_M_R05
, SKIN_ICON_MODE_F_ONLINE
, SKIN_ICON_MODE_F_BUSY
, SKIN_ICON_MODE_F_AT_WORK
, SKIN_ICON_MODE_F_FRIENDLY
, SKIN_ICON_MODE_F_AWAY
, SKIN_ICON_MODE_F_INVISIBLE
, SKIN_ICON_MODE_F_R01
, SKIN_ICON_MODE_F_R02
, SKIN_ICON_MODE_F_R03
, SKIN_ICON_MODE_F_R04
, SKIN_ICON_MODE_F_R05
, SKIN_ICON_MODE_X_F01

, SKIN_ICON_VIS_PRIVATE          // Row #5 (LAST)
, SKIN_ICON_VIS_PUBLIC
, SKIN_ICON_DYN_01
, SKIN_ICON_DYN_02
, SKIN_ICON_DYN_03
, SKIN_ICON_DYN_04
, SKIN_ICON_DYN_05
, SKIN_ICON_DYN_06
, SKIN_ICON_DYN_07
, SKIN_ICON_DYN_08
, SKIN_ICON_DYN_09
, SKIN_ICON_DYN_10
, SKIN_ICON_DYN_11
, SKIN_ICON_DYN_12
, SKIN_ICON_DYN_13
, SKIN_ICON_DYN_14
, SKIN_ICONS
};

enum SKIN_HICON           	// Windows Icons
{
  SKIN_HICON_NONE 		=	-1
, SKIN_HICON_CONNECTED          =	0
, SKIN_HICON_DISCONNECTED
, SKIN_HICON_BUSY
, SKIN_HICON_ERROR
, SKIN_HICON_ALERT
, SKIN_HICON_INFO
, SKIN_HICON_CANCEL
, SKIN_HICON_FILE_DOWNLOAD
, SKIN_HICON_FILE_UPLOAD
, SKIN_HICON_FILE_DELETE

, SKIN_HICON_MODE_M_ONLINE
, SKIN_HICON_MODE_M_BUSY
, SKIN_HICON_MODE_M_AT_WORK
, SKIN_HICON_MODE_M_FRIENDLY
, SKIN_HICON_MODE_M_AWAY

, SKIN_HICON_MODE_F_ONLINE
, SKIN_HICON_MODE_F_BUSY
, SKIN_HICON_MODE_F_AT_WORK
, SKIN_HICON_MODE_F_FRIENDLY
, SKIN_HICON_MODE_F_AWAY

, SKIN_HICON_SEX_MALE
, SKIN_HICON_SEX_FEMALE
, SKIN_HICON_SONORK
, SKIN_HICON_EVENT
, SKIN_HICON_CHAT
, SKIN_HICON_TRACKER
, SKIN_HICON_NOTES
, SKIN_HICON_TEMPLATE
, SKIN_HICON_REPLY_TEMPLATE
, SKIN_HICON_TIME
, SKIN_HICON_EMAIL
, SKIN_HICONS
};

enum SKIN_SIGN
{
  SKIN_SIGN_NONE	=-1
, SKIN_SIGN_ERROR   =0
, SKIN_SIGN_USERS
, SKIN_SIGN_SECURITY
, SKIN_SIGN_QUERY
, SKIN_SIGN_FILE
, SKIN_SIGN_WORKING
, SKIN_SIGN_TOOLS
, SKIN_SIGN_PLUGINS
, SKIN_SIGN_ALERT
, SKIN_SIGNS
};

enum SKIN_MICO		// Mini Icons
{
  SKIN_MICO_ADD_USER
, SKIN_MICO_TIME
, SKIN_MICO_NOTES
, SKIN_MICO_ADJUST
, SKIN_MICO_DISCONNECTED
, SKIN_MICO_CONNECTING
, SKIN_MICO_CONNECTED
, SKIN_MICO_TOOLS
, SKIN_MICO_FLOAT
, SKIN_MICO_PIN
, SKIN_MICOS
};

#define SKIN_DYN_ICON(i)		((SKIN_ICON)((i)+SKIN_ICON_DYN_01))
#define SKIN_MAX_DYN_ICONS		(SKIN_ICON_DYN_14 - SKIN_ICON_DYN_01 + 1)

#define SKIN_ICON_SW			16
#define SKIN_ICON_SH			16
#define SKIN_ICON_FULL_ROW_SX		0
#define SKIN_ICON_MASK_SY(y)		((y)+SKIN_ICON_SH)
#define SKIN_ICON_FULL_ROW_SW		(33 * SKIN_ICON_SW)
#define SKIN_ICON_FULL_ROWS		4

#define SKIN_ICON_LAST_ROW_SX		272
#define SKIN_ICON_LAST_ROW_SY		(SKIN_ICON_SH*2*SKIN_ICON_FULL_ROWS)
#define SKIN_ICON_LAST_ROW_SW		256

#define SKIN_MICO_SW			8
#define SKIN_MICO_SH			8


#define SKIN_SIGN_SW			24
#define SKIN_SIGN_SH			24

#define SKIN_LARGE_LOGO_SX		0
#define SKIN_LARGE_LOGO_SY		0
#define SKIN_LARGE_LOGO_SW		128
#define SKIN_LARGE_LOGO_SH		36

#define SKIN_SMALL_LOGO_SX		(SKIN_LARGE_LOGO_SX+SKIN_LARGE_LOGO_SW)
#define SKIN_SMALL_LOGO_SY		(SKIN_LARGE_LOGO_SY)
#define SKIN_SMALL_LOGO_SW		80
#define SKIN_SMALL_LOGO_SH		18


enum SKIN_COLOR
{
  SKIN_COLOR_NULL	=-1
, SKIN_COLOR_DIALOG	=0
, SKIN_COLOR_MSG_VIEW
, SKIN_COLOR_MSG_SELECT
, SKIN_COLOR_MSG_FOCUS
, SKIN_COLOR_MSG_IN_NEW
, SKIN_COLOR_MSG_IN_OLD
, SKIN_COLOR_MSG_OUT
, SKIN_COLOR_HINT
, SKIN_COLOR_CLIP
, SKIN_COLOR_CHAT
, SKIN_COLOR_CHAT_EXT
, SKIN_COLOR_MAIN
, SKIN_COLOR_MAIN_EXT
, SKIN_COLOR_SYSCON
, SKIN_COLOR_SYSCON_NEW
, SKIN_COLORS
};
enum SKIN_COLOR_INDEX
{
  SKIN_CI_BG		=0
, SKIN_CI_FG
, SKIN_CI_SP
, SKIN_CI_CHAT_SYS	=0
, SKIN_CI_CHAT_ACTION	=1
, SKIN_CI_MAIN_OFFLINE	=0
, SKIN_CI_MAIN_ONLINE	=1
, SKIN_CI_MAIN_EVENT	=2
, SKIN_COLOR_INDEXES	=3
};
enum SKIN_BRUSH
{
  SKIN_BRUSH_DIALOG
, SKIN_BRUSH_MSG_VIEW
, SKIN_BRUSH_MAIN_VIEW
, SKIN_BRUSHES
};
enum SKIN_FONT
{
  SKIN_FONT_MAIN_TREE
, SKIN_FONT_BOLD
, SKIN_FONT_CONSOLE
, SKIN_FONT_HINT
, SKIN_FONT_SMALL
, SKIN_FONT_LARGE
, SKIN_FONTS
};
enum SKIN_CURSOR
{
  SKIN_CURSOR_HAND
, SKIN_CURSOR_ARROW
, SKIN_CURSOR_SIZE_ALL
, SKIN_CURSOR_SIZE_NS
, SKIN_CURSOR_SIZE_WE
, SKIN_CURSORS
};

#if defined(SONORK_APP_BUILD)

struct TSonorkSkin
{

friend class TSonorkWin32App;
friend class TSonorkMyInfoWin;
friend struct TSonorkSkinCodecAtom;

	BOOL initialized;


	COLORREF
		color[SKIN_COLORS][SKIN_COLOR_INDEXES];

	HBRUSH
		brush[SKIN_BRUSHES];

	HFONT
		font[SKIN_FONTS];

	HCURSOR
		cursor[SKIN_CURSORS];
		
	struct {
		HICON		app;
		HICON		tray[3];
		HICON		skin[SKIN_HICONS];
	}hicon;

	struct {
		HIMAGELIST 	icon;
		HIMAGELIST 	sign;
		HIMAGELIST 	mico;
		int		dyn_icons;
	}image_list;

	struct {
		HDC		dc;
		HBITMAP		bm;
		struct
		{
			HBITMAP	mask;
		}sm;

		struct
		{
			COLORREF        l_bg,r_bg;
		}lg;
	}logo;

	bool
		Initialize(HINSTANCE hInstance
			, const char* icons_file
			, const char* logo_file
			, BOOL intranet_mode);

	void
		Clear();

	void
		MakePredefinedHicon(SKIN_HICON hic, SKIN_ICON sic);

	bool
		LoadBitmaps(const char *icons_file , const char*logo_file);

	void
		CreateColorBrushes();

	void
		DeleteColorBrushes();

	void
		DeleteFonts();

	void
		DeletePredefinedHicons();

public:

	TSonorkSkin();
	~TSonorkSkin();

	BOOL
		Loaded() const
		{ return brush[0]!=NULL; }

	void
		SetColor(SKIN_COLOR c , SKIN_COLOR_INDEX i, COLORREF cr);

	COLORREF
		Color(SKIN_COLOR c , SKIN_COLOR_INDEX i) const
		{ return color[c][i]; }

	HBRUSH
		Brush(SKIN_BRUSH b) const
		{ return brush[b]; }

	HFONT
		Font(SKIN_FONT f) const
		{ return font[f]; }

	HCURSOR
		Cursor(SKIN_CURSOR c) const
		{ return cursor[c];}

	void
		DrawIcon(HDC dc, SKIN_ICON icon, int x, int y,UINT flags=ILD_TRANSPARENT) const
		{ ImageList_Draw(image_list.icon,icon, dc, x, y, flags ); }

	void
		DrawSign(HDC dc, SKIN_SIGN sign, int x, int y,UINT flags=ILD_TRANSPARENT) const
		{ ImageList_Draw(image_list.sign,sign, dc, x, y, flags ); }

	void
		DrawMico(HDC dc, SKIN_MICO mico, int x, int y,UINT flags=ILD_TRANSPARENT) const
		{ ImageList_Draw(image_list.mico,mico, dc, x, y, flags ); }

	HIMAGELIST
		Icons() const
		{ return image_list.icon; }

	HIMAGELIST
		Signs() const
		{ return image_list.sign;}

	HIMAGELIST
		Micos() const
		{ return image_list.mico;}

	HICON
		AppHicon() const
		{ return hicon.app; }

	HICON
		Hicon(SKIN_HICON ic) const
		{ return ( ic > SKIN_HICON_NONE && ic<SKIN_HICONS )
			?hicon.skin[ic]
			:NULL;}
	LRESULT
		OnCtlColorMsgView(WPARAM) const;

	LRESULT
		OnCtlColorDialog(WPARAM) const;

	HICON
		CreateHicon(SKIN_ICON);

	void
		SetDefaultColors(BOOL lo_res, BOOL create_brushes=true);

	void
		DrawLargeLogo(HDC tDC, const RECT*, bool center);
		
	void
		DrawSmallLogo(HDC tDC, const RECT*, bool center);
};

extern TSonorkSkin
	sonork_skin ;

#endif	// #if defined(SONORK_APP_BUILD)



#endif
