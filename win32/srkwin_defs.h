#if !defined(SRKWIN_DEFS_H)
#define SRKWIN_DEFS_H

#include "srk_defs.h"



#if _WIN32_IE < 0x0400
#	error Need _WIN32_IE >= 0x0400
#else
#	include <commctrl.h>
#endif


class 	TSonorkWin;
enum 	SRK_MFC_EVENT;
enum 	GLS_INDEX;

#define SONORK_WIN_MAX_TOOLTIP_LENGTH	128
#define SONORK_WIN_AUX_TIMER_ID		1000
#define SONORK_WIN_MAX_MENU_LENGTH	92

enum SONORK_DRAG_DROP_EVENT;

enum SONORK_WIN_TYPE
{
	SONORK_WIN_TYPE_NONE	=0x00000000
,	SONORK_WIN_TYPE_MAIN	=0x0ff00000
,	SONORK_WIN_TYPE_1	=0x00100000
,	SONORK_WIN_TYPE_2       =0x00200000
,	SONORK_WIN_TYPE_3	=0x00300000
,	SONORK_WIN_TYPE_4	=0x00400000
,	SONORK_WIN_TYPE_5	=0x00500000
,	SONORK_WIN_TYPE_6	=0x00600000
,	SONORK_WIN_TYPE_7	=0x00700000
,	SONORK_WIN_TYPE_8	=0x00800000
,	SONORK_WIN_TYPE_9	=0x00900000
,	SONORK_WIN_TYPE_10	=0x00a00000
,	SONORK_WIN_TYPE_11	=0x00b00000
,	SONORK_WIN_TYPE_12	=0x00c00000
};
enum SONORK_WIN_DIALOG_INFO
{
	SONORK_WIN_DIALOG	=0x00001000
};

enum SONORK_WIN_DEF_MASKS
{
	SONORK_WIN_CLASS_MASK	=0xf0000000
,	SONORK_WIN_TYPE_MASK	=0x0ff00000
,	SONORK_WIN_DIALOG_MASK	=0x00003000
,	SONORK_WIN_RES_ID_MASK	=0x00000fff
};

enum SONORK_WIN_SYS_FLAG
{
	SONORK_WIN_SF_ACTIVE		=0x00000001
,	SONORK_WIN_SF_MINIMIZED		=0x00000002
,	SONORK_WIN_SF_STAY_ON_TOP	=0x00000004
,	SONORK_WIN_SF_TOOL_TIPS		=0x00000008
, 	SONORK_WIN_SF_NO_CLOSE		=0x00000010
,	SONORK_WIN_SF_NO_DEL_ON_DESTROY	=0x00000020
,	SONORK_WIN_SF_NO_WIN_PARENT	=0x00000040
,	SONORK_WIN_SF_AUX_TIMER		=0x00000080
,	SONORK_WIN_SF_NO_DEFAULT_FONT	=0x00000100
,	SONORK_WIN_SF_APP_COLORS	=0x00000200
,	SONORK_WIN_SF_MODAL		=0x00000400
,	SONORK_WIN_SF_WAS_CREATED	=0x00001000	// This flag remains after a successfull call to Create()
,	SONORK_WIN_SF_INITIALIZED	=0x00002000
,	SONORK_WIN_SF_DESTROYING	=0x00004000
,	SONORK_WIN_SF_DESTROYED		=0x00008000
,	SONORK_WIN_SF_APP_01		=0x00010000
,	SONORK_WIN_SF_APP_02		=0x00020000
,	SONORK_WIN_SF_APP_03		=0x00040000
,	SONORK_WIN_SF_APP_04		=0x00080000
,	SONORK_WIN_SF_APP_05		=0x00100000
,	SONORK_WIN_SF_APP_06		=0x00200000
,	SONORK_WIN_SF_APP_07		=0x00400000
,	SONORK_WIN_SF_APP_08		=0x00800000
,	SONORK_WIN_SF_APP_09		=0x01000000
,	SONORK_WIN_SF_APP_10		=0x02000000
,	SONORK_WIN_SF_APP_11		=0x04000000
,	SONORK_WIN_SF_APP_12		=0x08000000
,	SONORK_WIN_SF_APP_13		=0x10000000
,	SONORK_WIN_SF_APP_14		=0x20000000
};
// MASK for the SONORK_WIN_SF_APP_xxxx flags
#define SONORK_WIN_SF_APP_MASK	 	 	0x3fff0000

enum SONORK_WIN_USR_FLAG
{
	SONORK_WIN_F_USER_01		=0x00000001
,	SONORK_WIN_F_USER_02		=0x00000002
,	SONORK_WIN_F_USER_03		=0x00000004
,	SONORK_WIN_F_USER_04		=0x00000008
,	SONORK_WIN_F_USER_05		=0x00000010
,	SONORK_WIN_F_USER_06		=0x00000020
,	SONORK_WIN_F_USER_07		=0x00000040
,	SONORK_WIN_F_USER_08		=0x00000080
,	SONORK_WIN_F_USER_09		=0x00000100
,	SONORK_WIN_F_USER_10		=0x00000200
,	SONORK_WIN_F_USER_11		=0x00000400
,	SONORK_WIN_F_USER_12		=0x00000800
,	SONORK_WIN_F_USER_13		=0x00001000
,	SONORK_WIN_F_USER_14		=0x00002000
,	SONORK_WIN_F_UPDATING		=0x00100000
,	SONORK_WIN_F_UPDATING2		=0x00200000
};

enum SONORK_WIN_MESSAGE
{
	WM_SONORK_COMMAND			=(WM_APP+100)
,	WM_SONORK_POKE
,	WM_SONORK_MODAL_CREATE
,	WM_SONORK_DRAG_DROP
,	WM_SONORK_MFC
,	WM_SONORK_APP_BASE			=(WM_APP+150)
,	WM_SONORK_APP_01			=WM_SONORK_APP_BASE
,	WM_SONORK_APP_02
,	WM_SONORK_APP_03
,	WM_SONORK_APP_04
,	WM_SONORK_APP_05
,	WM_SONORK_APP_06
,	WM_SONORK_APP_07
,	WM_SONORK_APP_08
,	WM_SONORK_APP_09
,	WM_SONORK_APP_10
,	WM_SONORK_APP_LIMIT
,	WM_SONORK_USER_BASE			=(WM_APP+200)
,	WM_SONORK_USER_01			=WM_SONORK_USER_BASE
,	WM_SONORK_USER_02
,	WM_SONORK_USER_03
,	WM_SONORK_USER_04
,	WM_SONORK_USER_05
,	WM_SONORK_USER_06
,	WM_SONORK_USER_07
,	WM_SONORK_USER_08
,	WM_SONORK_USER_09
,	WM_SONORK_USER_10
,	WM_SONORK_USER_LIMIT
};

enum SONORK_WIN_POKE
{
// SONORK_WIN_POKE_xx
// are values used internally by each TSonorkWin
// and they have different meanings for each one.
  SONORK_WIN_POKE_NONE
, SONORK_WIN_POKE_01
, SONORK_WIN_POKE_02
, SONORK_WIN_POKE_03
, SONORK_WIN_POKE_04
, SONORK_WIN_POKE_05
, SONORK_WIN_POKE_06
, SONORK_WIN_POKE_07
, SONORK_WIN_POKE_08
, SONORK_WIN_POKE_09
, SONORK_WIN_POKE_10
, SONORK_WIN_POKE_11
, SONORK_WIN_POKE_12
, SONORK_WIN_POKE_13
, SONORK_WIN_POKE_14
, SONORK_WIN_POKE_15
, SONORK_WIN_POKE_16
, SONORK_WIN_POKE_17
, SONORK_WIN_POKE_18
, SONORK_WIN_POKE_19
, SONORK_WIN_POKE_20

// SONORK_WIN_POKE_APP_xx
// are values used by all TSonorkWins and
// are defined at application level
, SONORK_WIN_POKE_APP_01		= 100
, SONORK_WIN_POKE_APP_02
, SONORK_WIN_POKE_APP_03
, SONORK_WIN_POKE_APP_04
, SONORK_WIN_POKE_APP_05
, SONORK_WIN_POKE_APP_06
, SONORK_WIN_POKE_APP_07
, SONORK_WIN_POKE_APP_08
, SONORK_WIN_POKE_APP_09
, SONORK_WIN_POKE_APP_10
, SONORK_WIN_POKE_APP_11
, SONORK_WIN_POKE_APP_12
, SONORK_WIN_POKE_APP_13
, SONORK_WIN_POKE_APP_14
, SONORK_WIN_POKE_APP_15
, SONORK_WIN_POKE_APP_16
, SONORK_WIN_POKE_APP_17
, SONORK_WIN_POKE_APP_18
, SONORK_WIN_POKE_APP_19
, SONORK_WIN_POKE_APP_20
};

struct TSonorkWinClassDef
{
	const char *name;
	UINT		style;
	ATOM 		atom;
};



#if defined(SONORK_APP_BUILD)

enum SONORK_WIN_CLASS
{
	SONORK_WIN_CLASS_NORMAL	=0x00000000
,	SONORK_WIN_CLASS_APP	=0x10000000
,	SONORK_WIN_CLASS_MAIN	=0x20000000
,	SONORK_WIN_CLASSES	=3
};

#else

enum SONORK_WIN_CLASS
{
	SONORK_WIN_CLASS_NORMAL	=0x00000000
,	SONORK_WIN_CLASSES	=1
};

#define GLS_NULL	0

#endif

#include "srkskin.h"


#endif	// #if !defined(GUWIN_DEFS_H)
